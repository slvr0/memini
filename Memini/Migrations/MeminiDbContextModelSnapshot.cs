// <auto-generated />
using System;
using System.Collections.Generic;
using Memini.entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Memini.Migrations
{
    [DbContext(typeof(MeminiDbContext))]
    partial class MeminiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn", "phone" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "oauth_registration_type", new[] { "dynamic", "manual" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "one_time_token_type", new[] { "confirmation_token", "reauthentication_token", "recovery_token", "email_change_token_new", "email_change_token_current", "phone_change_token" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "action", new[] { "INSERT", "UPDATE", "DELETE", "TRUNCATE", "ERROR" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "realtime", "equality_op", new[] { "eq", "neq", "lt", "lte", "gt", "gte", "in" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "storage", "buckettype", new[] { "STANDARD", "ANALYTICS" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("seq_schema_version", "graphql")
                .IsCyclic();

            modelBuilder.Entity("Memini.entities.EventCategorizationInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.PrimitiveCollection<List<string>>("Categories")
                        .HasColumnType("text[]")
                        .HasColumnName("categories");

                    b.Property<string>("Genre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("genre");

                    b.Property<int?>("GlobalRank")
                        .HasColumnType("integer")
                        .HasColumnName("global_rank");

                    b.Property<bool?>("IsFeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("is_featured");

                    b.PrimitiveCollection<List<string>>("Labels")
                        .HasColumnType("text[]")
                        .HasColumnName("labels");

                    b.Property<int?>("LocalRank")
                        .HasColumnType("integer")
                        .HasColumnName("local_rank");

                    b.Property<string>("PrimaryCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("primary_category");

                    b.Property<decimal?>("RelevanceScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("relevance_score");

                    b.Property<string>("Segment")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("segment");

                    b.Property<string>("SubGenre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sub_genre");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("EventId")
                        .HasName("event_categorization_info_pkey");

                    b.HasIndex(new[] { "Categories" }, "idx_cat_categories");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "Categories" }, "idx_cat_categories"), "gin");

                    b.HasIndex(new[] { "Genre" }, "idx_cat_genre");

                    b.HasIndex(new[] { "PrimaryCategory" }, "idx_cat_primary");

                    b.HasIndex(new[] { "Type" }, "idx_cat_type");

                    b.ToTable("event_categorization_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventGeographicInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("country_code");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("longitude");

                    b.Property<string>("PlaceId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("place_id");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("SearchRadiusUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("search_radius_unit");

                    b.Property<decimal?>("SearchRadiusValue")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("search_radius_value");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("state");

                    b.Property<string>("StateCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("state_code");

                    b.HasKey("EventId")
                        .HasName("event_geographic_info_pkey");

                    b.HasIndex(new[] { "City" }, "idx_geo_city");

                    b.HasIndex(new[] { "Latitude", "Longitude" }, "idx_geo_coordinates");

                    b.HasIndex(new[] { "CountryCode" }, "idx_geo_country");

                    b.ToTable("event_geographic_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventMedium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Attribution")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("attribution");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<string>("MediaType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("media_type");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("url");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("event_media_pkey");

                    b.HasIndex(new[] { "EventId" }, "idx_media_event");

                    b.HasIndex(new[] { "EventId", "IsPrimary" }, "idx_media_primary");

                    b.ToTable("event_media", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventPerformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.PrimitiveCollection<List<string>>("Genres")
                        .HasColumnType("text[]")
                        .HasColumnName("genres");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsHeadliner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_headliner");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("PerformerId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("performer_id");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("event_performers_pkey");

                    b.HasIndex(new[] { "EventId" }, "idx_performers_event");

                    b.HasIndex(new[] { "PerformerId" }, "idx_performers_id");

                    b.HasIndex(new[] { "Name" }, "idx_performers_name");

                    b.ToTable("event_performers", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventPriceRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<decimal?>("MaxPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MinPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("min_price");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("event_price_ranges_pkey");

                    b.HasIndex(new[] { "EventId" }, "idx_price_ranges_event");

                    b.ToTable("event_price_ranges", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventPricingInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("currency");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("boolean")
                        .HasColumnName("is_free");

                    b.Property<decimal?>("MaxPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("max_price");

                    b.Property<decimal?>("MinPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("min_price");

                    b.HasKey("EventId")
                        .HasName("event_pricing_info_pkey");

                    b.HasIndex(new[] { "IsFree" }, "idx_pricing_free");

                    b.HasIndex(new[] { "MaxPrice" }, "idx_pricing_max");

                    b.HasIndex(new[] { "MinPrice" }, "idx_pricing_min");

                    b.ToTable("event_pricing_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventStatusInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_cancelled");

                    b.Property<bool?>("IsPostponed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_postponed");

                    b.Property<bool?>("IsRescheduled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rescheduled");

                    b.Property<bool?>("IsSoldOut")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sold_out");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("StatusChangedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("status_changed_at");

                    b.Property<string>("StatusReason")
                        .HasColumnType("text")
                        .HasColumnName("status_reason");

                    b.Property<string>("TicketAvailability")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("ticket_availability");

                    b.HasKey("EventId")
                        .HasName("event_status_info_pkey");

                    b.HasIndex(new[] { "IsActive" }, "idx_status_active");

                    b.HasIndex(new[] { "IsCancelled" }, "idx_status_cancelled");

                    b.HasIndex(new[] { "Status" }, "idx_status_status");

                    b.ToTable("event_status_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventTemporalInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("DisplayTime")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_time");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsDateTbd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_date_tbd");

                    b.Property<bool?>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<bool?>("IsTimeTbd")
                        .HasColumnType("boolean")
                        .HasColumnName("is_time_tbd");

                    b.Property<DateTime?>("LocalEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("local_end_date");

                    b.Property<DateTime?>("LocalStartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("local_start_date");

                    b.Property<DateTime?>("RecurrenceEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("recurrence_end_date");

                    b.Property<string>("RecurrenceFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("recurrence_frequency");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Timezone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("timezone");

                    b.HasKey("EventId")
                        .HasName("event_temporal_info_pkey");

                    b.HasIndex(new[] { "EndDate" }, "idx_temporal_end_date");

                    b.HasIndex(new[] { "LocalStartDate" }, "idx_temporal_local_start");

                    b.HasIndex(new[] { "StartDate" }, "idx_temporal_start_date");

                    b.ToTable("event_temporal_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventVenueInfo", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("event_id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("jsonb")
                        .HasColumnName("additional_info");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("url");

                    b.Property<string>("VenueId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("venue_id");

                    b.HasKey("EventId")
                        .HasName("event_venue_info_pkey");

                    b.HasIndex(new[] { "City" }, "idx_venue_city");

                    b.HasIndex(new[] { "VenueId" }, "idx_venue_id");

                    b.HasIndex(new[] { "Name" }, "idx_venue_name");

                    b.ToTable("event_venue_info", (string)null);
                });

            modelBuilder.Entity("Memini.entities.MeminiEvent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DataQuality")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("data_quality");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("memini_event_pkey");

                    b.HasIndex(new[] { "CreatedAt" }, "idx_events_created_at");

                    b.HasIndex(new[] { "DataQuality" }, "idx_events_data_quality");

                    b.HasIndex(new[] { "ExternalId" }, "idx_events_external_id");

                    b.HasIndex(new[] { "Name" }, "idx_events_name");

                    b.HasIndex(new[] { "Source" }, "idx_events_source");

                    b.ToTable("memini_event", (string)null);
                });

            modelBuilder.Entity("Memini.entities.StoredUserTask", b =>
                {
                    b.Property<int>("Storedusertaskkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("storedusertaskkey");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Storedusertaskkey"));

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<bool?>("Favorite")
                        .HasColumnType("boolean")
                        .HasColumnName("favorite");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int?>("Userkey")
                        .HasColumnType("integer")
                        .HasColumnName("userkey");

                    b.HasKey("Storedusertaskkey")
                        .HasName("StoredUserTask_pkey");

                    b.HasIndex("Userkey");

                    b.ToTable("StoredUserTask", (string)null);
                });

            modelBuilder.Entity("Memini.entities.User", b =>
                {
                    b.Property<int>("Userkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userkey");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Userkey"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.HasKey("Userkey")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Email" }, "User_email_key")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Memini.entities.UserTask", b =>
                {
                    b.Property<int>("Usertaskkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usertaskkey");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Usertaskkey"));

                    b.Property<DateOnly?>("Created")
                        .HasColumnType("date")
                        .HasColumnName("created")
                        .HasComment("Datetime when task was created");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<int>("Endtime")
                        .HasColumnType("integer")
                        .HasColumnName("endtime");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<int>("Starttime")
                        .HasColumnType("integer")
                        .HasColumnName("starttime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int?>("Userkey")
                        .HasColumnType("integer")
                        .HasColumnName("userkey");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Usertaskkey")
                        .HasName("UserTask_pkey");

                    b.HasIndex("Userkey");

                    b.ToTable("UserTask", (string)null);
                });

            modelBuilder.Entity("Memini.entities.EventCategorizationInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventCategorizationInfo")
                        .HasForeignKey("Memini.entities.EventCategorizationInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_categorization_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventGeographicInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventGeographicInfo")
                        .HasForeignKey("Memini.entities.EventGeographicInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_geographic_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventMedium", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithMany("EventMedia")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_media_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventPerformer", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithMany("EventPerformers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_performers_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventPriceRange", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithMany("EventPriceRanges")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_price_ranges_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventPricingInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventPricingInfo")
                        .HasForeignKey("Memini.entities.EventPricingInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_pricing_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventStatusInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventStatusInfo")
                        .HasForeignKey("Memini.entities.EventStatusInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_status_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventTemporalInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventTemporalInfo")
                        .HasForeignKey("Memini.entities.EventTemporalInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_temporal_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.EventVenueInfo", b =>
                {
                    b.HasOne("Memini.entities.MeminiEvent", "Event")
                        .WithOne("EventVenueInfo")
                        .HasForeignKey("Memini.entities.EventVenueInfo", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("event_venue_info_event_id_fkey");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Memini.entities.StoredUserTask", b =>
                {
                    b.HasOne("Memini.entities.User", "UserkeyNavigation")
                        .WithMany("StoredUserTasks")
                        .HasForeignKey("Userkey")
                        .HasConstraintName("StoredUserTask_userkey_fkey");

                    b.Navigation("UserkeyNavigation");
                });

            modelBuilder.Entity("Memini.entities.UserTask", b =>
                {
                    b.HasOne("Memini.entities.User", "UserkeyNavigation")
                        .WithMany("UserTasks")
                        .HasForeignKey("Userkey")
                        .HasConstraintName("UserTask_userkey_fkey");

                    b.Navigation("UserkeyNavigation");
                });

            modelBuilder.Entity("Memini.entities.MeminiEvent", b =>
                {
                    b.Navigation("EventCategorizationInfo");

                    b.Navigation("EventGeographicInfo");

                    b.Navigation("EventMedia");

                    b.Navigation("EventPerformers");

                    b.Navigation("EventPriceRanges");

                    b.Navigation("EventPricingInfo");

                    b.Navigation("EventStatusInfo");

                    b.Navigation("EventTemporalInfo");

                    b.Navigation("EventVenueInfo");
                });

            modelBuilder.Entity("Memini.entities.User", b =>
                {
                    b.Navigation("StoredUserTasks");

                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
